{
  "extends": "eslint:recommended",
  "plugins": [
    "react",
    "babel"
  ],
  "env": {
    "es6": true,
    "browser": true,
    "jest": true,
    "node": true
  },
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 6,
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true,
      "jsx": true,
      "modules": true,
      "templateStrings": true,
      "legacyDecorators": true
    },
    "sourceType": "module"
  },
  "rules": {
    /////////////
    // REACT //
    /////////////
    "react/default-props-match-prop-types": 2, // Prevent extraneous defaultProps on components
    "react/no-array-index-key": 0, // Prevent usage of Array index in keys
    "react/no-children-prop": 2, // Prevent passing of children as props
    "react/no-deprecated": 1, // Prevent usage of deprecated methods
    "react/no-did-mount-set-state": 2, // prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": 2, // prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": 2, // prevent direct mutation of this.state
    "react/no-is-mounted": 2, //Prevent usage of isMounted
    "react/no-redundant-should-component-update": 1, // Prevent usage of shouldComponentUpdate when extending React.PureComponent
    "react/no-render-return-value": 2, // Prevent usage of the return value of React.render
    "react/no-typos": 1, // Prevent common casing typos
    "react/no-string-refs": 1, // Prevent using string references
    "react/no-unused-prop-types": 1, // Prevent definitions of unused prop types
    "react/no-will-update-set-state": 2, // Prevent usage of setState in componentWillUpdate
    "react/prefer-es6-class": 2, // enforce ES5 or ES6 class for React Components
    "react/prefer-stateless-function": 0, // Enforce stateless React Components to be written as a pure function
    "react/prop-types": 2, // prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": 1, // Prevent missing React when using JSX
    "react/require-default-props": 2, // enforce a defaultProps definition for every prop that is not a required prop
    "react/require-render-return": 2, // enforce ES5 or ES6 class for returning value in render function
    "react/self-closing-comp": 1, // Prevent extra closing tags for components without children (fixable)
    "react/style-prop-object": 2, // Enforce style prop value being an object
    "react/void-dom-elements-no-children": 2, // Prevent void DOM elements (e.g. <img />, <br />) from receiving children
    ///////////
    // JSX //
    ///////////
    "react/jsx-closing-tag-location": 1, // Validate closing tag location in JSX (fixable)
    // enforce or disallow spaces inside of curly braces in JSX attributes
    "react/jsx-curly-spacing": [
      1,
      "never"
    ],
    // configure the position of the first property
    "react/jsx-first-prop-new-line": [
      2,
      "multiline"
    ],
    // validate JSX indentation
    "react/jsx-indent": [
      2,
      "tab"
    ],
    // validate props indentation in JSX
    "react/jsx-indent-props": [
      2,
      "tab"
    ],
    "react/jsx-key": 2, // detect missing key prop
    // limit maximum of props on a single line in JSX
    "react/jsx-max-props-per-line": [
      2,
      {
        "maximum": 1
      }
    ],
    "react/jsx-no-comment-textnodes": 2, // Prevent comments from being inserted as text nodes
    "react/jsx-no-duplicate-props": 2, // prevent duplicate properties in JSX
    "react/jsx-no-undef": 2, // disallow undeclared variables in JSX
    "react/jsx-pascal-case": 2, // enforce PascalCase for user-defined JSX components
    "react/jsx-uses-react": 2, // prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": 2, // prevent variables used in JSX to be incorrectly marked as unused
    // Validate whitespace in and around the JSX opening and closing brackets (fixable)
    "react/jsx-tag-spacing": [
      2,
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never"
      }
    ],
    "react/jsx-wrap-multilines": 1, // Prevent missing parentheses around multilines JSX (fixable)
    ////////// Possible Errors //////////
    "no-await-in-loop": 0, // disallow await inside of loops
    "no-cond-assign": 0, // disallow assignment operators in conditional expressions
    "no-console": [
      2,
      {
        "allow": [
          "warn",
          "error"
        ]
      }
    ], // allow the use of console onl for warn and error
    "no-constant-condition": 2, // disallow constant expressions in conditions
    "no-control-regex": 2, // disallow control characters in regular expressions
    "no-dupe-args": 2, // disallow duplicate arguments in function definitions
    "no-dupe-keys": 2, // disallow duplicate keys in object literals
    "no-duplicate-case": 2, // disallow duplicate case labels
    "no-empty-character-class": 2, // disallow empty character classes in regular expressions
    // disallow empty block statements
    "no-empty": [
      2,
      {
        "allowEmptyCatch": true
      }
    ],
    "no-ex-assign": 2, // disallow reassigning exceptions in catch clauses
    "no-extra-boolean-cast": 2, // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": 0, // disallow unnecessary parentheses
    "no-extra-semi": 2, // disallow unnecessary semicolons
    "no-func-assign": 2, // disallow overwriting functions written as function declarations
    "no-inner-declarations": 2, // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2, // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
    "no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-prototype-builtins": 2, // disallow calling some Object.prototype methods directly on objects
    "no-regex-spaces": 2, // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2, // disallow sparse arrays
    "no-template-curly-in-string": 2, // disallow template literal placeholder syntax in regular strings
    "no-unexpected-multiline": 2, // disallow confusing multiline expressions
    "no-unreachable": 2, // disallow unreachable code after return, throw, continue, and break statements
    "no-unsafe-finally": 2, // disallow control flow statements in finally blocks
    "no-unsafe-negation": 2, // disallow negating the left operand of relational operators
    "use-isnan": 2, // require calls to isNaN() when checking for NaN
    "valid-jsdoc": 2, // Ensure JSDoc comments are valid
    "valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string
    ////////// Best Practices //////////
    "accessor-pairs": 2, // enforce getter and setter pairs in objects
    "array-callback-return": 2, // enforce return statements in callbacks of array methods
    "block-scoped-var": 2, // enforce the use of variables within the scope they are defined
    "class-methods-use-this": 0, // enforce that class methods utilize this
    "complexity": 0, // enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": 2, // require return statements to either always or never specify values
    "curly": 2, // enforce consistent brace style for all control statements
    "default-case": 2, // require default cases in switch statements
    "dot-location": [
      2,
      "property"
    ], // enforce consistent newlines before and after dots
    "dot-notation": 0, // enforce dot notation whenever possible
    "eqeqeq": 2, // require the use of === and !==
    "guard-for-in": 0, // require for-in loops to include an if statement
    "no-alert": 0, // disallow the use of alert, confirm, and prompt
    "no-caller": 0, // disallow use of arguments.caller or arguments.callee
    "no-case-declarations": 2, // disallow lexical declarations in case clauses
    "no-div-regex": 0, // disallow division operators explicitly at beginning of regular expression
    "no-else-return": 0, // disallow else blocks after return statements in if statements
    "no-empty-function": [
      2,
      {
        "allow": [
          "arrowFunctions"
        ]
      }
    ], // disallow empty functions
    "no-eq-null": 2, // disallow null comparisons without type-checking operators
    "no-eval": 2, // disallow use of eval()
    "no-extend-native": 2, // disallow extending native types
    "no-extra-bind": 2, // disallow unnecessary calls to .bind()
    "no-extra-label": 2, // disallow unnecessary labels
    "no-fallthrough": 2, // disallow fallthrough of case statements
    "no-floating-decimal": 2, // disallow leading or trailing decimal points in numeric literals
    "no-global-assign": 2, // disallow assignments to native objects or read-only global variables
    "no-implicit-coercion": 2, // disallow shorthand type conversions
    "no-implicit-globals": 2, // disallow variable and function declarations in the global scope
    "no-implied-eval": 2, // disallow use of eval()-like methods
    "no-invalid-this": 2, // disallow this keywords outside of classes or class-like objects
    "no-iterator": 0, // disallow usage of __iterator__ property
    "no-labels": 2, // disallow labeled statements
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow function declarations and expressions inside loop statements
    // disallow magic numbers
    "no-magic-numbers": [
      1,
      {
        "ignore": [
          -1,
          0,
          1,
          -2,
          2,
          100,
          3600,
          7,
          24,
          60,
          365
        ]
      }
    ],
    "no-multi-spaces": 2, // disallow multiple spaces
    "no-multi-str": 0, // disallow multiline strings
    "no-new-func": 2, // disallow new operators with the Function object
    "no-new-wrappers": 2, // disallow new operators with the String, Number, and Boolean objects
    "no-new": 0, // disallow new operators outside of assignments or comparisons
    "no-octal-escape": 2, // disallow octal escape sequences in string literals
    "no-octal": 2, // disallow octal literals
    "no-param-reassign": 2, // disallow reassigning function parameters
    "no-proto": 2, // disallow the use of the __proto__ property
    "no-redeclare": 2, // disallow variable redeclaration
    "no-restricted-properties": 0, // disallow certain properties on certain objects
    "no-return-assign": 2, // disallow assignment operators in return statements
    "no-return-await": 2, // disallow unnecessary return await
    "no-script-url": 2, // disallow javascript: urls
    "no-self-assign": 2, // disallow assignments where both sides are exactly the same
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
    "no-sequences": 2, // disallow comma operators
    "no-throw-literal": 2, // disallow throwing literals as exceptions
    "no-unmodified-loop-condition": 2, // disallow unmodified loop conditions
    // disallow unused expressions
    "no-unused-expressions": [
      2,
      {
        "allowTernary": true,
        "allowShortCircuit": true
      }
    ],
    "no-unused-labels": 2, // disallow unused labels
    "no-useless-call": 0, // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": 2, // disallow unnecessary concatenation of literals or template literals
    "no-useless-constructor": 2, // Disallow unnecessary constructor
    "no-useless-escape": 0, // disallow unnecessary escape characters
    "no-useless-return": 2, // disallow redundant return statements
    "no-void": 2, // disallow void operators
    "no-warning-comments": 0, // disallow specified warning terms in comments
    "no-with": 2, // disallow with statements
    "radix": 2, // enforce the consistent use of the radix argument when using parseInt()
    "require-await": 2, // disallow async functions which have no await expression
    "vars-on-top": 2, // require var declarations be placed at the top of their containing scope
    "wrap-iife": 0, // require parentheses around immediate function invocations
    "yoda": 2, // require or disallow “Yoda” conditions
    ////////// Strict Mode //////////
    "strict": 0, // require or disallow strict mode directives
    ////////// Variables //////////
    // disallow unused variables
    "init-declarations": 2, // require or disallow initialization in variable declarations
    "no-catch-shadow": 2, // disallow catch clause parameters from shadowing variables in the outer scope
    "no-delete-var": 2, // disallow deleting variables
    "no-label-var": 2, // disallow labels that share a name with a variable
    "no-restricted-globals": 0, // disallow specified global variables
    "no-shadow-restricted-names": 2, // disallow identifiers from shadowing restricted names
    "no-shadow": 2, // disallow variable declarations from shadowing variables declared in the outer scope
    "no-undef-init": 2, // disallow initializing variables to undefined
    "no-undef": 2, // disallow the use of undeclared variables unless mentioned in /*global */ comments
    "no-undefined": 0, // disallow the use of undefined as an identifier
    "no-unused-vars": [
      1,
      {
        "args": "none",
        "ignoreRestSiblings": true
      }
    ],
    "no-use-before-define": 2, // disallow the use of variables before they are defined
    ////////// Stylistic Issues //////////
    "array-bracket-spacing": 2, // enforce consistent spacing inside array brackets
    "block-spacing": 2, // enforce consistent spacing inside single-line blocks
    // enforce consistent brace style for blocks
    "brace-style": [
      1,
      "stroustrup",
      {
        "allowSingleLine": true
      }
    ],
    "camelcase": 1, // enforce camelcase naming convention
    "capitalized-comments": 0, // enforce or disallow capitalization of the first letter of a comment
    // require or disallow trailing commas
    "comma-dangle": [
      1,
      {
        "arrays": "always-multiline",
        "objects": "always-multiline",
        "imports": "never",
        "exports": "never",
        "functions": "ignore"
      }
    ],
    "comma-spacing": 1, // enforce consistent spacing before and after commas
    "comma-style": 1, // enforce consistent comma style
    "computed-property-spacing": 2, // enforce consistent spacing inside computed property brackets
    // enforce consistent naming when capturing the current execution context
    "consistent-this": [
      2,
      "that"
    ],
    "eol-last": 2, // require or disallow newline at the end of files
    "func-call-spacing": 2, // require or disallow spacing between function identifiers and their invocations
    "func-name-matching": 2, // require function names to match the name of the variable or property to which they are assigned
    "func-names": 0, // require or disallow named function expressions
    "func-style": 0, // enforce the consistent use of either function declarations or expressions
    // enforce consistent indentation
    "indent": [
      2,
      "tab",
      {
        "SwitchCase": 1,
        "MemberExpression": 1,
        "CallExpression": {
          "arguments": 1
        }
      }
    ],
    // enforce the consistent use of either double or single quotes in JSX attributes
    "jsx-quotes": [
      1,
      "prefer-double"
    ],
    "key-spacing": 2, // enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": 2, // enforce consistent spacing before and after keywords
    "line-comment-position": 0, // enforce position of line comments
    // enforce consistent linebreak style
    "linebreak-style": [
      2,
      "unix"
    ],
    "lines-around-comment": 2, // require empty lines around comments
    "new-cap": 0, // require constructor names to begin with a capital letter
    "newline-before-return": 1, // require an empty line before return statements
    "newline-per-chained-call": 0, // require a newline after each call in a method chain
    "padding-line-between-statements": [ // Define rules for empty line after variable and statements
      "error",
      {
        "blankLine": "always",
        "prev": [
          "const",
          "let",
          "var"
        ],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": [
          "const",
          "let",
          "var"
        ],
        "next": [
          "const",
          "let",
          "var"
        ]
      }
    ],
    "no-array-constructor": 2, // disallow Array constructors
    "no-bitwise": 2, // disallow bitwise operators
    "no-continue": 2, // disallow continue statements
    "no-lonely-if": 2, // disallow if statements as the only statement in else blocks
    // disallow mixed binary operators
    "no-mixed-operators": [
      2,
      {
        "allowSamePrecedence": true
      }
    ],
    "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation
    // disallow multiple empty lines
    "no-multiple-empty-lines": [
      1,
      {
        "max": 1
      }
    ],
    "no-negated-condition": 0, // disallow negated conditions
    "no-nested-ternary": 0, // disallow nested ternary expressions
    "no-new-object": 2, // disallow Object constructors
    "no-plusplus": 0, // disallow the unary operators ++ and --
    // disallow trailing whitespace at the end of lines
    "no-trailing-spaces": [
      2,
      {
        "skipBlankLines": true
      }
    ],
    "no-unneeded-ternary": 2, // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": 2, // disallow whitespace before properties
    // enforce consistent line breaks inside braces
    "object-curly-newline": [
      2,
      {
        "multiline": true,
        "minProperties": 1
      }
    ],
    "object-curly-spacing": 0, // enforce consistent spacing inside braces, overriden by babel rule
    "object-property-newline": 2, // enforce placing object properties on separate lines
    "one-var-declaration-per-line": 2, // require or disallow newlines around variable declarations
    "operator-assignment": 1, // require or disallow assignment operator shorthand where possible
    // require quotes around object literal property names
    "quote-props": [
      2,
      "as-needed"
    ],
    // enforce the consistent use of either backticks, double, or single quotes
    "quotes": [
      1,
      "single"
    ],
    // require JSDoc comments
    "require-jsdoc": [
      2,
      {
        "require": {
          "FunctionDeclaration": true,
          "MethodDefinition": true,
          "ClassDeclaration": true,
          "ArrowFunctionExpression": false
        }
      }
    ],
    "semi-spacing": 2, // enforce consistent spacing before and after semicolons
    // require or disallow semicolons instead of ASI
    "semi": [
      2,
      "always"
    ],
    "space-before-blocks": 2, // enforce consistent spacing before blocks
    "space-infix-ops": 2, // require spacing around infix operators (+,-,==,etc)
    "spaced-comment": 2, // enforce consistent spacing after the // or /* in a comment
    // require or disallow Unicode byte order mark (BOM)
    "unicode-bom": [
      2,
      "never"
    ],
    "wrap-regex": 2, // require parenthesis around regex literals
    ////////// ECMAScript 6 //////////
    "arrow-body-style": [
      2,
      "always"
    ], // require braces around arrow function bodies
    "arrow-parens": 2, // require parentheses around arrow function arguments
    "arrow-spacing": 1, // enforce consistent spacing before and after the arrow in arrow functions
    "constructor-super": 2, // require super() calls in constructors
    "no-class-assign": 2, // disallow reassigning class members
    "no-const-assign": 2, // disallow reassigning const variables
    "no-dupe-class-members": 2, // disallow duplicate class members
    "no-duplicate-imports": 2, // disallow duplicate module imports
    "no-new-symbol": 2, // disallow new operators with the Symbol object
    "no-this-before-super": 2, // disallow this/super before calling super() in constructors
    "no-useless-computed-key": 2, // disallow unnecessary computed property keys in object literals
    "no-useless-rename": 2, // disallow renaming import, export, and destructured assignments to the same name
    "no-var": 2, // require let or const instead of var
    "prefer-const": 2, // require const declarations for variables that are never reassigned after declared
    "require-yield": 2, // require generator functions to contain yield
    ////////// Babel //////////
    "babel/object-curly-spacing": 2,
    "react/sort-comp": 0,
    "max-len": 0
  }
}
